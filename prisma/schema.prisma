// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum MovieType {
  MOVIE
  SERIES
}

model User {
  id           Int              @id @default(autoincrement())
  externalId   String           @unique
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  emailAddress String           @unique
  firstName    String?
  lastName     String?
  avatar       String?
  identities   UserIdentities[]
  userGroups   UserGroup[]
  ownerGroups  Group[]
  movieVotes   MovieVote[]
  groupInvites GroupInvite[]

  @@index([externalId])
}

model UserIdentities {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     Int
  provider   String
  providerId String
  user       User     @relation(fields: [userId], references: [id])

  @@unique([provider, userId])
  @@index([userId])
}

model Movie {
  id         Int         @id @default(autoincrement())
  title      String
  year       Int
  imdbId     String      @unique
  type       MovieType
  posterUrl  String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  movieVotes MovieVote[]

  @@index([imdbId])
}

model Group {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  image       String?
  color       String?
  ownerId     Int
  owner       User     @relation(fields: [ownerId], references: [id])

  users        UserGroup[]
  movieVotes   MovieVote[]
  groupInvites GroupInvite[]

  @@index([ownerId])
}

enum GroupInviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

model GroupInvite {
  id           Int               @id @default(autoincrement())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  sentAt       DateTime
  respondedAt  DateTime?
  cancelledAt  DateTime?
  status       GroupInviteStatus
  groupId      Int
  emailAddress String
  userId       Int?

  group Group @relation(fields: [groupId], references: [id])
  user  User? @relation(fields: [userId], references: [id])

  @@index([groupId])
  @@index([emailAddress])
}

enum UserGroupType {
  OWNER
  MEMBER
  ADMIN
  INVITED
  OTHER
}

model UserGroup {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    Int
  groupId   Int
  type      UserGroupType @default(OTHER)
  user      User          @relation(fields: [userId], references: [id])
  group     Group         @relation(fields: [groupId], references: [id])

  @@index([userId])
  @@index([groupId])
}

model MovieVote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  movieId   Int
  groupId   Int?
  vote      Int
  user      User     @relation(fields: [userId], references: [id])
  movie     Movie    @relation(fields: [movieId], references: [id])
  group     Group?   @relation(fields: [groupId], references: [id])

  @@unique([userId, movieId, groupId])
  @@index([userId])
  @@index([movieId])
}
